import React, {useEffect, useState} from 'react'
import Modal from 'react-modal'

import {fetchImages, getSingleImage, postComment} from "api";
import * as classes from 'components/imagesPage/styles.css'

Modal.setAppElement('#root')

const ImagesPage = () => {
    const [images, setImages] = useState([])
    const [error, setError] = useState('')
    const [isOpen, setIsOpen] = useState(false)
    const [singleImage, setSingleImage] = useState({})
    const [text, setText] = useState('')
    // console.log('images', images)
    // console.log('singleImage', singleImage)
    // console.log('date', new Date().getTime())

    const handleSubmit = async (event) => {
        event.preventDefault()
        const imageId = singleImage.id
        const options = {
            name: 111,
            comment: text
        }
        await postComment(imageId, options)
        setText('')
    }

    const renderForm = () => (
        <form onSubmit={handleSubmit}>
            <div className="mb-3">
                <label htmlFor="exampleInputEmail1" className="form-label">Your comment</label>
                <textarea
                    className="form-control"
                    id="exampleInputEmail1"
                    aria-describedby="emailHelp"
                    value={text}
                    onChange={event => setText(event.target.value)}
                />
                <div id="emailHelp" className="form-text">You can write your comment in this textarea</div>
            </div>
            <button type="submit" className="btn btn-primary" disabled={!text}>Submit</button>
        </form>
    )

    const renderComments = () => (
        singleImage.comments.map(comment => (
            <div
                className="text-start"
                style={{
                    "width": "20rem",
                    "border": "1px solid #404040",
                    "borderRadius": "5px",
                    "background": "#E0E0E0",
                    "padding": "15px"
                }}
                key={comment.id}
            >
                <span className='form-text'>ID: {comment.id}</span>
                <p style={{"fontSize": "20px"}}>{comment.text}</p>
                <span className='form-text text-muted'>{new Date(comment.date).toLocaleString()}</span>
            </div>
        ))
    )

    const renderModal = () => (
        <Modal
            isOpen={isOpen}
            onRequestClose={toggleModal}
            contentLabel='My dialog'
            className={classes.myModal}
            overlayClassName={classes.myOverlay}
        >
            <div className='row'>
                <div className='col-md-6'>
                    <img src={singleImage.url} alt='image'/>
                </div>
                <div className='col-md-6'>
                    {singleImage && singleImage.comments && renderComments()}
                    <hr/>
                    {renderForm()}
                </div>
            </div>
            <button className='btn btn-primary' style={{"marginTop": "20px"}} onClick={toggleModal}>Close modal</button>
        </Modal>
    )

    const toggleModal = () => {
        setIsOpen(!isOpen)
    }

    const handleClick = async (imageId) => {
        try {
            const tempSingleImage = await getSingleImage(imageId)
            setSingleImage(tempSingleImage)
            toggleModal()
        } catch (err) {
            console.log('error: ', err)
        }
    }

    const renderImages = () => (
        images.map(item => (
            <div
                key={item.id}
                className='col-md-4'
                style={{"marginTop": "20px"}}
            >
                <button
                    type='button'
                    className='btn'
                    onClick={() => {
                        handleClick(item.id)
                    }}
                >
                    <img
                        src={item.url}
                        className="img-fluid"
                        alt="photo"
                    />
                </button>
            </div>
        ))
    )

    useEffect(async () => {
        try {
            const img = await fetchImages()
            setImages(img)
        } catch (err) {
            setError('Произошла непредвиденная ошибка сервера. Попробуйте позже.')
        }
    }, [fetchImages, error])

    return (
        <div className='container'>
            {isOpen && renderModal()}
            <div className='row'>
                {images && renderImages()}
                {error && <h1 className='text-danger'>{error}</h1>}
            </div>
        </div>
    )
}

export default ImagesPage